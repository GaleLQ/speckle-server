version: "2.3"
name: "speckle-server"

services:
  postgres:
    image: "postgres:14.5-alpine"
    restart: always
    ports:
      - "15432:5432"
    environment:
      POSTGRES_DB: speckle
      POSTGRES_USER: speckle
      POSTGRES_PASSWORD: speckle
    volumes:
      - /opt/speckle/postgres-data:/var/lib/postgresql/data/
    healthcheck:

      test: ["CMD-SHELL", "pg_isready -U speckle"]
      interval: 5s
      timeout: 5s
      retries: 30

  redis:
    image: "redis:7-alpine"
    restart: always
    volumes:
      - /opt/speckle/redis-data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 30

  minio:
    image: "minio/minio"
    command: server /data --console-address ":9001"
    restart: always
    volumes:
      - /opt/speckle/minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5


  speckle-ingress:
    image: speckle/speckle-docker-compose-ingress:2
    restart: always
    ports:
      - "0.0.0.0:80:8080"
      - "0.0.0.0:3010:8080"
    environment:
      FILE_SIZE_LIMIT_MB: "100"
      NGINX_ENVSUBST_OUTPUT_DIR: "/etc/nginx"

  speckle-frontend-2:
    image: speckle/speckle-frontend-2:2
    restart: always
    environment:
      NUXT_PUBLIC_SERVER_NAME: "local"
      NUXT_PUBLIC_API_ORIGIN: "http://68.79.29.11"
      NUXT_PUBLIC_BACKEND_API_ORIGIN: "http://speckle-server:3000"
      NUXT_PUBLIC_BASE_URL: "http://68.79.29.11"
      NUXT_PUBLIC_LOG_LEVEL: 'warn'
      NUXT_REDIS_URL: "redis://redis"

#  speckle-server:
#    image: speckle/speckle-server:2
#    ports:
#      - "3011:3000"
#    restart: always
#    healthcheck:
#      test:
#        [
#          "CMD",
#          "node",
#          "-e",
#          "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }",
#        ]
#      interval: 10s
#      timeout: 3s
#      retries: 30
#
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      minio:
#        condition: service_healthy
#    environment:
#      CANONICAL_URL: "http://68.79.29.11:3010"
#      SPECKLE_AUTOMATE_URL: "http://127.0.0.1:3030"
#
#      REDIS_URL: "redis://redis"
#
#      S3_ENDPOINT: "http://minio:9000"
#      S3_ACCESS_KEY: "minioadmin"
#      S3_SECRET_KEY: "minioadmin"
#      S3_BUCKET: "speckle-server"
#      S3_CREATE_BUCKET: "true"
#
#      FILE_SIZE_LIMIT_MB: 100
#
#      SESSION_SECRET: "zhanfu_secret"
#
#      STRATEGY_LOCAL: "true"
#      DEBUG: "speckle:*"
#
#      POSTGRES_URL: "postgres"
#      POSTGRES_USER: "speckle"
#      POSTGRES_PASSWORD: "speckle"
#      POSTGRES_DB: "speckle"
#      ENABLE_MP: "false"
#
#      USE_FRONTEND_2: "true"
#      FRONTEND_ORIGIN: "http://68.79.29.11:3010"

  preview-service:
    image: speckle/speckle-preview-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    mem_limit: "1000m"
    memswap_limit: "1000m"
    environment:
      DEBUG: "preview-service:*"
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"

  webhook-service:
    image: speckle/speckle-webhook-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    environment:
      DEBUG: "webhook-service:*"
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"
      WAIT_HOSTS: postgres:5432

  fileimport-service:
    image: speckle/speckle-fileimport-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    environment:
      DEBUG: "fileimport-service:*"
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"
      WAIT_HOSTS: postgres:5432

      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_BUCKET: "speckle-server"

      SPECKLE_SERVER_URL: "http://speckle-server:3000"


#  speckle-server:
#    build:
#      context: .
#      dockerfile: packages/server/Dockerfile
#    platform: linux/amd64
#    image: speckle/speckle-server:local
#    restart: always
#    healthcheck:
#      test:
#        - CMD
#        - node
#        - -e
#        - "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }"
#      interval: 10s
#      timeout: 10s
#      retries: 3
#      start_period: 90s
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      minio:
#        condition: service_healthy
#    environment:
#      SPECKLE_AUTOMATE_URL: "http://127.0.0.1:3030"
#      # TODO: Change this to the URL of the speckle server, as accessed from the network
#      CANONICAL_URL: "http://68.79.29.11:3010"
#      # TODO: Change this to a unique secret for this server
#      SESSION_SECRET: "zhanfu_secret"
#      STRATEGY_LOCAL: 'true'
#      LOG_LEVEL: 'info'
#
#      POSTGRES_URL: 'postgres'
#      POSTGRES_USER: 'speckle'
#      POSTGRES_PASSWORD: 'speckle'
#      POSTGRES_DB: 'speckle'
#
#      REDIS_URL: 'redis://redis'
#
#      S3_ENDPOINT: "http://minio:9000"
#      S3_ACCESS_KEY: 'minioadmin'
#      S3_SECRET_KEY: 'minioadmin'
#      S3_BUCKET: 'speckle-server'
#      S3_CREATE_BUCKET: 'true'
#      S3_REGION: '' # optional, defaults to 'us-east-1'
#      FILE_SIZE_LIMIT_MB: 100
#      EMAIL_FROM: 'no-reply@example.org'
#
#      USE_FRONTEND_2: true
#      FRONTEND_ORIGIN: 'http://68.79.29.11:3010'

  speckle-server:
#    image: speckle/speckle-server:local
    image: speckle/speckle-server:2
#    build:
#      context: .
#      dockerfile: packages/server/Dockerfile
    ports:
      - "3011:3000"
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }",
        ]
      interval: 10s
      timeout: 3s
      retries: 30

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      CANONICAL_URL: "http://68.79.29.11"
      SPECKLE_AUTOMATE_URL: "http://68.79.29.11"

      REDIS_URL: "redis://redis"

      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_BUCKET: "speckle-server"
      S3_CREATE_BUCKET: "true"

      FILE_SIZE_LIMIT_MB: 100

      SESSION_SECRET: "zhanfu_secret"

      STRATEGY_LOCAL: "true"
      DEBUG: "speckle:*"

      POSTGRES_URL: "postgres"
      POSTGRES_USER: "speckle"
      POSTGRES_PASSWORD: "speckle"
      POSTGRES_DB: "speckle"
      ENABLE_MP: "false"

      USE_FRONTEND_2: "true"
      FRONTEND_ORIGIN: "http://68.79.29.11"

networks:
  default:
    name: speckle-server
